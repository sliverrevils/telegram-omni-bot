import TelegramBot from "node-telegram-bot-api";
import mongoose from "mongoose";
import dotenv from "dotenv";
import { User } from "./models/User";

import { Channel } from "./models/Channel";

import { ContextDefaultState, MessageContext, VK } from "vk-io";
import { Message } from "./models/Message";
import { UsersUserFull } from "vk-io/lib/api/schemas/objects";
import { sendConfirmationEmail } from "./services/emailService";
import { sendMail365 } from "./services/mail365";
import { checkLastMessagesOzon, getChats_Ozon, getMessagesFromChat_Ozon, sendMsgToChat_Ozon, setAsReadChat_Ozon } from "./services/ozonService";
//import { startListenVk } from "./services/vkService";

dotenv.config();
let token = process.env.BOT_TOKEN_DEV!;
const args = process.argv.slice(2);
const varieable = args.find((arg) => arg.startsWith("--start="));

if (varieable) {
    const start = varieable.split("=")[1];
    console.log("MY_VARIABLE:", start);

    if (start == "prod") {
        token = process.env.BOT_TOKEN_PROD!;
    }
}

//!---------------------------------------

function truncateText(text: string, maxLength: number = 300): string {
    if (text.length > maxLength) {
        return text.slice(0, maxLength) + "...";
    }
    return text;
}

function formatPhoneNumber(phone: string): string | null {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ "+" –≤ –Ω–∞—á–∞–ª–µ
    phone = phone.replace(/[^\d+]/g, "");

    // –£–±–∏—Ä–∞–µ–º "+" –≤ –Ω–∞—á–∞–ª–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–ª–∏–Ω—É —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä
    const phoneDigits = phone.startsWith("+") ? phone.slice(1) : phone;
    if (phoneDigits.length !== 11) {
        console.error("–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 11 —Ü–∏—Ñ—Ä.");
        return null;
    }

    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "8", –º–µ–Ω—è–µ–º –µ—ë –Ω–∞ "7"
    if (phone.startsWith("8")) {
        phone = "7" + phone.slice(1);
    }

    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "+", –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if (!phone.startsWith("+")) {
        phone = "+" + phone;
    }

    return phone;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∏–∑ MongoDB
export interface IUser extends Document {
    _id: string;
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
    chatId: number;
    isConfirmed: boolean;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≥—Ä—É–ø–ø—ã
export interface IChannel extends Document {
    userId: string;
    groupId: string;
    token: string;
    channelName: string;
    operatorsChatIds: number[];
    chatId: number;
    type: "vk" | "ozon";
}

interface IMessage extends Document {
    channelName: string;
    text: string;
    time: number;
}

type TStatusChat = {
    [key: number]: string; //main addOperator_:  addvkGroup userReg
};

type TTempDataChat = {
    [key: number]: any; //main addOperator_:  addvkGroup userReg
};
type TConversationChatVK = {
    [key: number]: { vk: VK; peer: UsersUserFull; groupId: string }; //main addOperator_:  addvkGroup userReg
};

//–î–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º Ozone.\nCLIENT_ID: ${channel.groupId}, API_KEY :${channel.token}\nOzonChatId: ${ozonChatId}`);
type TConversationChatOzon = {
    [key: number]: { clientId: string; apiKey: string; ozonChatId: string }; //main addOperator_:  addvkGroup userReg
};

type TUserInfoChat = {
    [key: number]: {
        firstName: string;
        lastName: string;
        email: string;
        phone: string;
        code?: string;
    };
};

//STATUS CHATS

const statusChats: TStatusChat = {};
const conversationChatsVK: TConversationChatVK = {};
const conversationChatsOZON: TConversationChatOzon = {};
const usersInfoChats: TUserInfoChat = {};
const tempDataChats: TTempDataChat = {};

//–ú–∞—Å—Å–∏–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–ª—É—à–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ VK
const activeListeners: Map<string, () => void> = new Map();

function generateConfirmationCode(length = 10) {
    const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    let code = "";

    for (let i = 0; i < length; i++) {
        const randomIndex = Math.floor(Math.random() * characters.length);
        code += characters[randomIndex];
    }

    return code;
}

const startBot = () => {
    //? –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞

    //const token = process.env.BOT_TOKEN!;
    const bot = new TelegramBot(token, { polling: true });

    //? –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB

    mongoose
        .connect(process.env.MONGODB_URI!)
        .then(async () => {
            console.log("MongoDB connected");
            const users = await User.find().then((arr) => {
                arr.forEach((user) => {
                    usersInfoChats[user.chatId] = {
                        firstName: user.firstName,
                        lastName: user.lastName,
                        email: user.email,
                        phone: user.phone,
                    };
                });
            });
            console.log("USERS", usersInfoChats);
        })
        .catch((err) => console.error("MongoDB connection error:", err));

    //–ú–µ–Ω—é –Ω–∞—á–∞–ª—å–Ω–æ–µ
    bot.setMyCommands([
        { command: "/start", description: "–°—Ç–∞—Ä—Ç ü§ñ" },
        { command: "/dialogs", description: "–î–∏–∞–ª–æ–≥–∏ ‚úâÔ∏è" },
        { command: "/channels", description: "–ö–∞–Ω–∞–ª—ã üì¨" },
        { command: "/operators", description: "–û–ø–µ—Ä–∞—Ç–æ—Ä—ã üõÇ" },
        { command: "/settings", description: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è" },
    ]);

    // –ú–µ–Ω—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã VK
    const menuAddChannel = {
        reply_markup: {
            keyboard: [[{ text: "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ VK" }], [{ text: "–î–æ–±–∞–≤–∏—Ç—å OZON Seller" }]],
            resize_keyboard: true,
            one_time_keyboard: true,
        },
    };

    const exitBtn = {
        reply_markup: {
            keyboard: [[{ text: "–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π ‚ùå" }]],
            resize_keyboard: true,
            one_time_keyboard: true,
        },
    };

    const menuButtons = {
        reply_markup: {
            keyboard: [
                [
                    //  { text: "/start", callback_data: "menu_start" },
                    { text: "–î–∏–∞–ª–æ–≥–∏ ‚úâÔ∏è", callback_data: "menu_dialogs" },
                ],
                [
                    { text: "–ö–∞–Ω–∞–ª—ã üì¨", callback_data: "menu_dialogs" },
                    { text: "–û–ø–µ—Ä–∞—Ç–æ—Ä—ã üõÇ", callback_data: "menu_operators" },
                    { text: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", callback_data: "menu_settings" },
                ],

                [{ text: "–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π ‚ùå", callback_data: "btn_exit" }],
            ],
            resize_keyboard: true,
            one_time_keyboard: false,
        },
    };

    const menuSettings = {
        reply_markup: {
            keyboard: [[{ text: "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" }], [{ text: "–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π ‚ùå", callback_data: "btn_exit" }]],
            resize_keyboard: true,
            one_time_keyboard: false,
        },
    };

    const menuEndDialogVK = ({ peerName }: { peerName: string }) => {
        return {
            reply_markup: {
                keyboard: [[{ text: `–í—ã–π—Ç–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞ ` }], [{ text: `–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ c ${peerName} ` }], [{ text: `–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥ c ${peerName} ` }]],
                resize_keyboard: true,
                one_time_keyboard: false,
            },
        };
    };
    const menuEndDialogOzon = ({ peerName }: { peerName: string }) => {
        return {
            reply_markup: {
                keyboard: [[{ text: `–í—ã–π—Ç–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞ ` }], [{ text: `–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ c ${peerName} ` }]],
                resize_keyboard: true,
                one_time_keyboard: false,
            },
        };
    };

    //–§—É–Ω–∫—Ü–∏–∏ –ö–ê–ù–ê–õ–û–í
    const showChannels = async ({ chatId }: { chatId: number }) => {
        const channels = await Channel.find({ chatId });
        console.log("ChannelsüìÖ", channels);

        const userChannels = channels.map((channel) => {
            return [
                {
                    text: `${channel.channelName} üëë`,
                    callback_data: `viewChannel_:${channel.channelName}`,
                },
                {
                    text: `[${channel.operatorsChatIds.length}] ‚ûï –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞`,
                    callback_data: `addOperator_:${channel.channelName}`,
                },
                {
                    text: `‚ùå –∫–∞–Ω–∞–ª`,
                    callback_data: `deleteChannel_:${channel.channelName}`,
                },
            ];
        });

        bot.sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", {
            reply_markup: {
                inline_keyboard: [
                    ...userChannels,
                    [
                        {
                            text: "‚ûï –∫–∞–Ω–∞–ª",
                            callback_data: `addChannel`,
                        },
                        {
                            text: "‚ûï –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã",
                            callback_data: `addAllChannelsOperator`,
                        },
                    ],
                ],
            },
        });
    };

    const dropChannel = async ({ chatId, channelName }: { chatId: number; channelName: string }) => {
        const channel = await Channel.findOne({ chatId, channelName });
        if (channel) {
            const delRes = await Channel.deleteOne({ _id: channel._id });
            console.log("DEL RES", delRes);
            startListenVk();
            bot.sendMessage(chatId, `–ö–∞–Ω–∞–ª "${channel.channelName}" —É–¥–∞–ª–µ–Ω`);
        } else {
            bot.sendMessage(chatId, "–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
    };

    //!–§—É–Ω–∫—Ü–∏–∏ VK
    //–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ VK
    async function getUserVKInfo(vk: VK, senderId: number): Promise<UsersUserFull | undefined> {
        // let userInfo:UsersUserFull={

        // }
        try {
            const response = await vk.api.users.get({
                user_ids: [senderId],
            });

            const user = response[0];
            return user;
            //console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: ${user.first_name} ${user.last_name}`);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:", error);
            return undefined;
        }
    }
    //–ø–æ–º–µ—á–∞–µ–º –ø—Ä–æ—á–∏—Ç—Ç–∞–Ω—ã–º
    async function markMessagesAsRead(vk: VK, peerId: number) {
        try {
            await vk.api.messages.markAsRead({
                peer_id: peerId,
            });
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ:", error);
        }
    }

    //–§—É–Ω–∫—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤

    const addOperator = async ({ chatId, channelName, email }: { chatId: number; channelName: string; email: string }) => {
        const channel = await Channel.findOne({ chatId, channelName });
        const operator = await User.findOne({ email: email.toLowerCase() });
        if (!operator) return bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email "${email}" –Ω–µ –Ω–∞–π–¥–µ–Ω ! \n –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
        if (channel) {
            channel.operatorsChatIds = [...new Set([...channel.operatorsChatIds, operator.chatId])];
            await channel.save();
            await bot.sendMessage(chatId, `–í –∫–∞–Ω–∞–ª "${channelName}" –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä - ${operator.firstName} ${operator.lastName}`);
            await bot.sendMessage(operator.chatId, `–í–∞—Å —Å–¥–µ–ª–∞–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ [${channel.channelName}]`);
            statusChats[chatId] = "main";
        }
        startListenVk();
    };

    async function addOperatorForAllChannels({ chatId, email }: { chatId: number; email: string }) {
        const channels = await Channel.find({ chatId });
        const operator = await User.findOne({ email: email.toLowerCase() });
        if (!operator) return bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email "${email}" –Ω–µ –Ω–∞–π–¥–µ–Ω ! \n –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);

        channels.forEach(async (channel) => {
            channel.operatorsChatIds = [...new Set([...channel.operatorsChatIds, operator.chatId])];
            await channel.save();

            await bot.sendMessage(operator.chatId, `–í–∞—Å —Å–¥–µ–ª–∞–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ [${channel.channelName}]`);
        });
        statusChats[chatId] = "main";
        await bot.sendMessage(chatId, `–£ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø –Ω–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä - ${operator.firstName} ${operator.lastName}`, menuButtons);
        startListenVk();
    }

    async function showMyOperators({ chatId }: { chatId: number }) {
        const channels = await Channel.find({ chatId });
        let noOperators = true;

        for (const channel of channels) {
            for (const operatorChatId of channel.operatorsChatIds) {
                const operator = await User.findOne({ chatId: operatorChatId });
                if (operator) {
                    noOperators = false;
                    await bot.sendMessage(chatId, `[${channel.channelName}] - üõÇ ${operator.firstName} ${operator.lastName}`, {
                        reply_markup: {
                            inline_keyboard: [[{ text: `—É–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É`, callback_data: `delOperator_:${channel.groupId}_:${operator.chatId}` }]],
                        },
                    });
                }
            }
        }
        if (noOperators) await bot.sendMessage(chatId, `–°–µ—á–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.`);

        await bot.sendMessage(chatId, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã", {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "‚ûï",
                            callback_data: `addAllChannelsOperator`,
                        },
                    ],
                ],
            },
        });
    }

    //–§—É–Ω–∫—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤

    async function showMyDialogs({ chatId }: { chatId: number }) {
        //–∏—â–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –≥–¥–µ –º—ã –ª–∏–±–æ –∞–¥–º–∏–Ω –ª–∏–±–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
        const myChannels = await Channel.find({
            $or: [{ chatId }, { operatorsChatIds: { $in: [chatId] } }],
            type: "vk",
        });

        let isNoConversations = true;

        for (const channel of myChannels) {
            const vk = new VK({
                token: channel.token,
            });

            let dialogs: {
                text: string;
                callback_data?: string;
            }[][] = [];

            const conversations = await vk.api.messages.getConversations({
                filter: "unread", // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
                count: 20, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            });

            conversations.items.length && (await bot.sendMessage(chatId, `üì¨[${channel.channelName}]`));

            for (const item of conversations.items) {
                const { conversation, last_message } = item;
                //console.log("conversation item", item);
                const fromUserFullInfo = await getUserVKInfo(vk, conversation.peer.id);
                isNoConversations = false;

                await bot.sendMessage(chatId, `\t\t\t${new Date(last_message.date * 1000).toLocaleString()}\n‚úâÔ∏è ${fromUserFullInfo?.first_name} ${fromUserFullInfo?.last_name}: ${truncateText(last_message.text, 300)}`, {
                    reply_markup: {
                        inline_keyboard: [[{ text: `–ø–µ—Ä–µ–π—Ç–∏ –∫ –¥–∏–∞–ª–æ–≥—É c üë§ ${fromUserFullInfo?.first_name} ${fromUserFullInfo?.last_name}`, callback_data: `conversation_:${channel.groupId}_:${conversation.peer.id}` }]],
                    },
                });
            }
        }
        if (isNoConversations) {
            bot.sendMessage(chatId, "–°–µ–π—á–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –≤ VK.", menuButtons);
        }

        //console.log("myChannels üì¨", myChannels);
        //TODO OZON CHATS
        const myChannelsOzon = await Channel.find({
            $or: [{ chatId }, { operatorsChatIds: { $in: [chatId] } }],
            type: "ozon",
        });
        for (const channel of myChannelsOzon) {
            try {
                //console.log("CHAT", channel.groupId, channel.token);
                const chats = (await getChats_Ozon(channel.groupId, channel.token)).chats.filter((chat) => chat.chat_type === "Buyer_Seller").sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime());
                for (const chat of chats) {
                    bot.sendMessage(chatId, `üì¨[${channel.channelName}]\n–ß–∞—Ç Ozon, —Å–æ–∑–¥–∞–Ω: ${new Date(chat.created_at).toLocaleString()}\n–Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π : ${chat.unread_count}`, {
                        reply_markup: {
                            inline_keyboard: [[{ text: `–ø–µ—Ä–µ–π—Ç–∏ –∫ –¥–∏–∞–ª–æ–≥—É —Å –∫–ª–∏–µ–Ω—Ç–æ–º Ozon`, callback_data: `zn ${channel.id} ${chat.chat_id}` }]],
                        },
                    });
                }
            } catch (error) {
                console.log("‚ùåCHATS OZON ERROR", error);
            }
        }
    }

    async function showHistoryOfConverstationVK({ vkGroupId, chatId, vk, currentPeer }: { vkGroupId: string; chatId: number; vk: VK; currentPeer: UsersUserFull }) {
        try {
            const { items } = await vk.api.messages.getHistory({
                peer_id: currentPeer.id,
                count: 20,
                rev: 0,
            });

            for (const item of items.reverse()) {
                console.log("ITEM‚úâÔ∏è", item);
                const isAdmin = item.from_id !== currentPeer.id;
                if (isAdmin) {
                    await bot.sendMessage(chatId, `‚§¥Ô∏è${vkGroupId} : <i>${item.text}</i>`, { parse_mode: "HTML" });
                } else {
                    await bot.sendMessage(chatId, `‚úâÔ∏è ${currentPeer.first_name} ${currentPeer.last_name}: ${item.text}`);
                }
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
        }
    }

    async function showHistoryOfConverstationOzon({ chatId, clientId, apiKey, ozonChatId }: { chatId: number; clientId: string; apiKey: string; ozonChatId: string }) {
        try {
            const msgs = await getMessagesFromChat_Ozon(clientId, apiKey, ozonChatId, null, "Backward", 10);
            console.log("OZON MSGS", msgs);

            for (const msg of msgs.reverse()) {
                // console.log("ITEM‚úâÔ∏è", item);
                const isAdmin = msg.user.type === "Seller";
                if (isAdmin) {
                    await bot.sendMessage(chatId, `‚§¥Ô∏è : ${msg.data[0]}`, { parse_mode: "HTML" });
                } else {
                    await bot.sendMessage(chatId, `‚úâÔ∏è : ${msg.data[0]}`);
                }
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
        }
    }

    async function conversationNow({ chatId, text }: { chatId: number; text: string }) {
        if (conversationChatsVK[chatId]) {
            const { vk, peer } = conversationChatsVK[chatId];
            console.log("MSG‚úâÔ∏è", { vk, peer, text });

            const msgRes = await vk.api.messages.send({
                peer_id: peer.id,
                message: text,
                random_id: Math.floor(Math.random() * 100000),
            });
            console.log("MSG RES VK‚úâÔ∏è", msgRes);
        }

        if (conversationChatsOZON[chatId]) {
            const { apiKey, clientId, ozonChatId } = conversationChatsOZON[chatId];

            console.log("SEND TO OZON ‚úâÔ∏è", { apiKey, clientId, ozonChatId, text });
            await sendMsgToChat_Ozon(clientId, apiKey, ozonChatId, text);
        }
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    const initNewUser = (chatId: number) => {
        usersInfoChats[chatId] = {
            firstName: "",
            lastName: "",
            email: "",
            phone: "",
        };
    };

    //! –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.on("message", async (msg) => {
        const chatId = msg.chat.id;
        const text = msg.text;
        console.log("STATUS ", usersInfoChats[chatId]);

        if (/\/start/.test(text!) || !statusChats?.[chatId]) {
            const existingUser = await User.findOne({ chatId });
            if (existingUser) {
                statusChats[chatId] = "main";
                usersInfoChats[chatId] = {
                    firstName: existingUser.firstName,
                    lastName: existingUser.lastName,
                    email: existingUser.email,
                    phone: existingUser.phone,
                };

                await bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç ${existingUser.firstName} ${existingUser.lastName}`, menuButtons);
            } else {
                initNewUser(chatId);
                statusChats[chatId] = "userReg_firstName";
                bot.sendMessage(chatId, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è:");
                return;
            }
        }
        if (text === "–í—ã–π—Ç–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞") {
            statusChats[chatId] = "main";
            delete conversationChatsVK[chatId];
            delete conversationChatsOZON[chatId];
            await bot.sendMessage(chatId, `–í—ã –≤—ã—à–ª–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞. \n–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ.`, menuButtons);
            return;
        }

        if (text?.startsWith("–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ c")) {
            if (conversationChatsVK[chatId]) {
                const peerName = text.split("c")[1];

                await markMessagesAsRead(conversationChatsVK[chatId].vk, conversationChatsVK[chatId].peer.id);
                statusChats[chatId] = "main";
                delete conversationChatsVK[chatId];
                await bot.sendMessage(chatId, `–î–∏–∞–ª–æ–≥ —Å ${peerName} –∑–∞–≤–µ—Ä—à–µ–Ω. \n–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ.`, menuButtons);
                return;
            }

            if (conversationChatsOZON[chatId]) {
                statusChats[chatId] = "main";
                delete conversationChatsVK[chatId];
                const { apiKey, clientId, ozonChatId } = conversationChatsOZON[chatId];
                try {
                    const msgs = await getMessagesFromChat_Ozon(clientId, apiKey, ozonChatId, null, "Backward", 10);

                    for (const msg of msgs) {
                        const { message_id } = msg;
                        console.log("END", message_id);
                        await setAsReadChat_Ozon(clientId, apiKey, ozonChatId, message_id);
                    }

                    await bot.sendMessage(chatId, `–î–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º Ozon –∑–∞–≤–µ—Ä—à–µ–Ω. \n–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ.`, menuButtons);
                } catch (error) {
                    ("‚ùåCHAT END OZON ERROR‚ùå");
                }
            }
        }
        if (text?.startsWith("–£–¥–∞–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥ c")) {
            const { vk, peer, groupId } = conversationChatsVK[chatId];
            try {
                await vk.api.messages.deleteConversation({ peer_id: peer.id });

                await bot.sendMessage(chatId, `–î–∏–∞–ª–æ–≥ —Å ${peer.first_name}  ${peer.last_name} —É–¥–∞–ª–µ–Ω ! `, menuButtons);
                statusChats[chatId] = "main";
                delete conversationChatsVK[chatId];
            } catch (error) {
                console.log("DELETE CONVERSATION ERROR", error);
            }
            return;
        }
        if (text === "–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π ‚ùå") {
            //const existingUser = await User.findOne({ chatId });
            statusChats[chatId] = "main";
            delete conversationChatsOZON[chatId];
            delete conversationChatsVK[chatId];
            delete tempDataChats[chatId];
            delete statusChats[chatId];
            bot.sendMessage(chatId, `–ì–ª–∞–≤–Ω—ã–π –∫–∞–Ω–∞–ª`, menuButtons);
            return;
        }

        if (text === "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏") {
            statusChats[chatId] = "userReg_firstName";
            tempDataChats[chatId] = {};
            tempDataChats[chatId].update = true;
            bot.sendMessage(chatId, " –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è:");

            return;
        }

        if (text === "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è" || text === "/settings") {
            if (usersInfoChats[chatId]) {
                await bot.sendMessage(chatId, `–ò–º—è : ${usersInfoChats[chatId].firstName}\n–§–∞–º–∏–ª–∏—è : ${usersInfoChats[chatId].lastName}\n–¢–µ–ª–µ—Ñ–æ–Ω : ${usersInfoChats[chatId].phone}\nEmail : ${usersInfoChats[chatId].email}`, menuSettings);
            }

            return;
        }

        //! SING IN
        if (statusChats[chatId] && statusChats[chatId].startsWith("userReg")) {
            const position = statusChats[chatId].split("_")[1];

            if (!text) return;

            if (position === "firstName") {
                if (/^[A-Za-z–ê-–Ø–∞-—è]{2,15}$/.test(text)) {
                    usersInfoChats[chatId].firstName = text;
                    statusChats[chatId] = "userReg_lastName";
                    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:");
                } else {
                    bot.sendMessage(chatId, "‚ö†Ô∏è –í–∞—à–µ –∏–º—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –æ—Ç 2 –¥–æ 15 –±—É–∫–≤ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª–æ–≤! \n–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:");
                }
            }
            if (position === "lastName") {
                if (/^[A-Za-z–ê-–Ø–∞-—è]{2,15}$/.test(text)) {
                    usersInfoChats[chatId].lastName = text;
                    statusChats[chatId] = "userReg_phone";
                    bot.sendMessage(chatId, "–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79491112233:");
                } else {
                    bot.sendMessage(chatId, "‚ö†Ô∏è –í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è –¥–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å –æ—Ç 2 –¥–æ 15 –±—É–∫–≤ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª–æ–≤! \n–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:");
                }
            }
            if (position === "phone") {
                const nowPhone = formatPhoneNumber(text);
                if (!!nowPhone) {
                    usersInfoChats[chatId].phone = nowPhone;
                    statusChats[chatId] = "userReg_email";
                    bot.sendMessage(chatId, "–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π email:");
                } else {
                    bot.sendMessage(chatId, "‚ö†Ô∏è –ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞! \n–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79491112233:");
                }
            }
            if (position === "email") {
                if (/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(text)) {
                    usersInfoChats[chatId].email = text.toLowerCase();
                    usersInfoChats[chatId].code = generateConfirmationCode();
                    //await sendConfirmationEmail({ email: usersInfoChats[chatId].email, code: usersInfoChats[chatId].code });

                    if (await sendMail365(usersInfoChats[chatId].email, usersInfoChats[chatId].code)) {
                        statusChats[chatId] = "userReg_confirm";
                        bot.sendMessage(chatId, ` –ö–æ–¥ –ø–æ–¥–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ—á—Ç—É "${usersInfoChats[chatId].email}".\n‚ö†Ô∏è"–ï—Å–ª–∏ –ø–∏—Å—å–º–æ –Ω–µ –ø—Ä–∏—à–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É ¬´–°–ø–∞–º¬ª –∏–ª–∏ ¬´–ù–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ—á—Ç–∞¬ª."\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:`, exitBtn);
                    } else {
                        statusChats[chatId] = "userReg_confirm";
                        bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—á—Ç—ã ! ‚ùå\n–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${usersInfoChats[chatId].code}\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:`, exitBtn);
                    }
                } else {
                    bot.sendMessage(chatId, "‚ö†Ô∏è –ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email!\n–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π email:", exitBtn);
                }
            }

            if (position === "confirm") {
                if (usersInfoChats[chatId].code === text) {
                    if (tempDataChats?.[chatId]?.update) {
                        const currentUser = await User.findOne({ chatId });
                        if (currentUser) {
                            currentUser.firstName = usersInfoChats[chatId].firstName;
                            currentUser.lastName = usersInfoChats[chatId].lastName;
                            currentUser.email = usersInfoChats[chatId].email;
                            currentUser.phone = usersInfoChats[chatId].phone;
                            currentUser.isConfirmed = true;
                            await currentUser.save();
                            statusChats[chatId] = "main";
                            bot.sendMessage(chatId, "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", menuButtons);

                            return;
                        }
                    }

                    const user = new User({ firstName: usersInfoChats[chatId].firstName, lastName: usersInfoChats[chatId].lastName, email: usersInfoChats[chatId].email, phone: usersInfoChats[chatId].phone, chatId, isConfirmed: true });
                    await user.save();
                    await bot.sendMessage(chatId, `üåü –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ! üåü`, menuButtons);
                    statusChats[chatId] = "main";
                    startListenVk();
                } else {
                    await bot.sendMessage(chatId, `‚ö†Ô∏è –í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω—ã–π –∫–æ–¥!\n–£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ "${usersInfoChats[chatId].email}":`, exitBtn);
                }
            }

            return;
        }

        if (text === "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ VK") {
            statusChats[chatId] = "addvkGroup_channelName";
            bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ö–∞–Ω–∞–ª–∞:");
        } else if (statusChats[chatId] && statusChats[chatId].startsWith("addvkGroup")) {
            if (!text) return;
            const position = statusChats[chatId].split("_")[1];
            if (position === "channelName") {
                if (text.length > 2 && text.length <= 30) {
                    const isExist = await Channel.findOne({ channelName: text });
                    if (isExist) return bot.sendMessage(chatId, "‚ö†Ô∏è –ö–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:");
                    tempDataChats[chatId] = {
                        channelName: text,
                    };
                    statusChats[chatId] = "addvkGroup_groupId";
                    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ VK:", menuButtons);
                } else {
                    bot.sendMessage(chatId, "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –æ—Ç 2 –¥–æ 30 –±—É–∫–≤ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª–æ–≤!\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:");
                }
            }
            if (position === "groupId") {
                if (text.length > 2 && text.length < 30) {
                    const isExist = await Channel.findOne({ groupId: text });
                    if (isExist) return bot.sendMessage(chatId, "‚ö†Ô∏è –ö–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ VK —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ VK:");
                    tempDataChats[chatId].groupId = text;
                    statusChats[chatId] = "addvkGroup_token";
                    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ TOKEN —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ VK:");
                } else {
                    bot.sendMessage(chatId, "‚ö†Ô∏è ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ VK –¥–ª—è  –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤!\n–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ VK");
                }
            }
            if (position === "token") {
                const vk = new VK({ token: text });

                try {
                    const res = await vk.api.groups.getById({
                        group_id: tempDataChats[chatId].groupId,
                    });
                    console.log(res);
                    const user = await User.findOne({ chatId });

                    if (user) {
                        const group = new Channel({ userId: user._id, channelName: tempDataChats[chatId].channelName, groupId: tempDataChats[chatId].groupId, token: text, chatId, type: "vk" });
                        await group.save();

                        statusChats[chatId] = "main";
                        await bot.sendMessage(chatId, `–ö–∞–Ω–∞–ª "${tempDataChats[chatId].channelName}" —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω —Å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º VK ${tempDataChats[chatId].groupId}.`, menuButtons);
                        startListenVk();
                    } else {
                        bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≥—Ä—É–ø–ø—ã.");
                    }
                } catch (error) {
                    console.log(error);
                    bot.sendMessage(chatId, "‚ö†Ô∏è –ù–µ –≤–µ—Ä–Ω—ã–π —Ç–æ–∫–∫–µ–Ω —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ vk.com!\n–í–≤–µ–¥–∏—Ç–µ TOKEN —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ VK:", menuButtons);
                }
            }

            return;
        }

        //TODO ADD OZON CHANNEL
        if (text === "–î–æ–±–∞–≤–∏—Ç—å OZON Seller") {
            statusChats[chatId] = "addOzon_channelName";
            bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ö–∞–Ω–∞–ª–∞:");
        } else if (statusChats[chatId] && statusChats[chatId].startsWith("addOzon_")) {
            if (!text) return;
            const position = statusChats[chatId].split("_")[1];

            if (position === "channelName") {
                if (text.length > 2 && text.length <= 30) {
                    const isExist = await Channel.findOne({ channelName: text });
                    if (isExist) return bot.sendMessage(chatId, "‚ö†Ô∏è –ö–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:");
                    tempDataChats[chatId] = {
                        channelName: text,
                    };
                    statusChats[chatId] = "addOzon_clientId";
                    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ CLIENT_ID –ø—Ä–æ–¥–∞–≤—Ü–∞ OZON:", menuButtons);
                } else {
                    bot.sendMessage(chatId, "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –æ—Ç 2 –¥–æ 30 –±—É–∫–≤ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª–æ–≤!\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:");
                }
            }

            if (position === "clientId") {
                if (text.length > 2 && text.length < 30) {
                    const isExist = await Channel.findOne({ groupId: text });
                    if (isExist) return bot.sendMessage(chatId, "‚ö†Ô∏è –ö–∞–Ω–∞–ª —Å CLIENT_ID —É OZON –ø—Ä–æ–¥–∞–≤—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n–í–≤–µ–¥–∏—Ç–µ CLIENT_ID –ø—Ä–æ–¥–∞–≤—Ü–∞ OZON:");
                    tempDataChats[chatId].groupId = text;
                    statusChats[chatId] = "addOzon_apiKey";
                    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ API_KEY –ø—Ä–æ–¥–∞–≤—Ü–∞ OZON:");
                } else {
                    bot.sendMessage(chatId, "‚ö†Ô∏è CLIENT_ID —É OZON –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤!\n–í–≤–µ–¥–∏—Ç–µ CLIENT_ID –ø—Ä–æ–¥–∞–≤—Ü–∞ OZON:");
                }
            }

            if (position === "apiKey") {
                if (text.length > 30 && text.length < 50) {
                    const user = await User.findOne({ chatId });

                    if (user) {
                        const group = new Channel({ userId: user._id, channelName: tempDataChats[chatId].channelName, groupId: tempDataChats[chatId].groupId, token: text, chatId, type: "ozon" });
                        await group.save();

                        statusChats[chatId] = "main";
                        await bot.sendMessage(chatId, `–ö–∞–Ω–∞–ª "${tempDataChats[chatId].channelName}" —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω —Å OZON SELLER ${tempDataChats[chatId].groupId}.`, menuButtons);
                    } else {
                        bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≥—Ä—É–ø–ø—ã.");
                    }
                } else {
                    bot.sendMessage(chatId, "‚ö†Ô∏è –ù–µ –≤–µ—Ä–Ω—ã–π API_KEY !\n–í–≤–µ–¥–∏—Ç–µ API_KEY –ø—Ä–æ–¥–∞–≤—Ü–∞ OZON:");
                }
            }
        }

        // Channels
        if (text === "–ö–∞–Ω–∞–ª—ã üì¨" || text === "/channels") {
            showChannels({ chatId });
            return;
        }
        //–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞

        if (statusChats[chatId] && statusChats[chatId].startsWith("addOperator_:")) {
            const [_, channelName] = statusChats[chatId].split("_:");
            const email = text!;
            console.log("OPERATOR ADD", { channelName, email });
            addOperator({ chatId, channelName, email });
            return;
        }

        //Operators
        if (text === "–û–ø–µ—Ä–∞—Ç–æ—Ä—ã üõÇ" || text === "/operators") {
            showMyOperators({ chatId });
            return;
        }
        //Operators for all channels
        if (statusChats[chatId] && statusChats[chatId] === "addAllChannelsOperator") {
            addOperatorForAllChannels({ chatId, email: text! });
            return;
        }

        //Dialogs
        if (text === "–î–∏–∞–ª–æ–≥–∏ ‚úâÔ∏è" || text === "/dialogs") {
            showMyDialogs({ chatId });
            return;
        }

        //Dialog SEND MSG VK
        if (text && statusChats[chatId] && statusChats[chatId] === "conversation") {
            //console.log("TO CONVERSATION");
            conversationNow({ chatId, text });
            return;
        }
    });

    //! –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    bot.on("callback_query", async (query) => {
        const chatId = query!.message!.chat.id;
        const data = query.data!;
        console.log("callback_query", data);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (data.startsWith("menu")) {
            const menu = data.split("_")[1];
            console.log(menu);
            bot.sendMessage(chatId, `/${menu}`);
        }
        if (data.startsWith("viewChannel_:")) {
            const channelName = data.split("_:")[1];
            console.log(`VIEW CHANNEL ${channelName}`);
        } else if (data.startsWith("deleteChannel_:")) {
            const channelName = data.split("_:")[1];
            // console.log(`DELETE CHANNEL ${channelName}`);
            dropChannel({ chatId, channelName });
        } else if (data == "addChannel") {
            bot.sendMessage(chatId, "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ —Ç–∏–ø", menuAddChannel);
        } else if (data.startsWith("addOperator_:")) {
            const channelName = data.split("_:")[1];
            statusChats[chatId] = `addOperator_:${channelName}`;
            bot.sendMessage(chatId, "–£–∫–∞–∂–∏—Ç–µ email –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞");
        } else if (data === "addAllChannelsOperator") {
            statusChats[chatId] = `addAllChannelsOperator`;
            bot.sendMessage(chatId, "–£–∫–∞–∂–∏—Ç–µ email –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—Å–µ—Ö –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø : ");
        } else if (data.startsWith(`conversation_:`)) {
            console.log(data);
            const [_, groupId, peerId] = data.split("_:");
            console.log({ groupId, peerId });
            const currentChannel = await Channel.findOne({ groupId });
            const vk = new VK({ token: currentChannel!.token });
            const currentPeer = await getUserVKInfo(vk, Number(peerId));

            if (currentChannel && currentPeer) {
                const userNameStr = `${currentPeer?.first_name} ${currentPeer?.last_name}`;
                await bot.sendMessage(chatId, `–î–∏–∞–ª–æ–≥ –≤ –∫–∞–Ω–∞–ª–µ üì¨[<a href="https://vk.com/${currentChannel.groupId}">${currentChannel.channelName}</a>] c ${userNameStr}  `, { parse_mode: "HTML", ...menuEndDialogVK({ peerName: userNameStr }) });
                await showHistoryOfConverstationVK({ vkGroupId: currentChannel.groupId, chatId, vk, currentPeer });
                statusChats[chatId] = `conversation`;
                conversationChatsVK[chatId] = { vk, groupId: currentChannel.groupId, peer: currentPeer };
            }
        } else if (data.startsWith(`delOperator_:`)) {
            const [_, groupId, operatorChatId] = data.split("_:");
            const channel = await Channel.findOne({ groupId });
            if (channel) {
                channel.operatorsChatIds = channel.operatorsChatIds.filter((id) => id !== Number(operatorChatId));
                await channel.save();
                await bot.sendMessage(chatId, `–û–ø–µ—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω —Å –∫–∞–Ω–∞–ª–∞ [${channel.channelName}]!`);
                await bot.sendMessage(operatorChatId, `–í–∞—Å —É–±—Ä–∞–ª–∏ —Å –∫–∞–Ω–∞–ª–∞ [${channel.channelName}]!`);
                startListenVk();
            }
            // `delOperator_:${channel.groupId}_:${operator.chatId}`
        } else if (data.startsWith("zn")) {
            ("zn ${channel.id} ${chat.chat_id}");
            const [_, channelId, ozonChatId] = data.split(" ");
            const channel = await Channel.findById(channelId);
            if (channel) {
                bot.sendMessage(chatId, `–î–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º Ozone.\nCLIENT_ID: ${channel.groupId}, API_KEY :${channel.token}\nOzonChatId: ${ozonChatId}`, { parse_mode: "HTML", ...menuEndDialogOzon({ peerName: "–ö–ª–∏–µ–Ω—Ç —Å Ozon" }) });
                statusChats[chatId] = `conversation`;
                conversationChatsOZON[chatId] = {
                    clientId: channel.groupId,
                    apiKey: channel.token,
                    ozonChatId,
                };
                showHistoryOfConverstationOzon({ chatId, clientId: channel.groupId, apiKey: channel.token, ozonChatId });
            } else {
                console.log("‚ùåCHANNEL NOT FOUND‚ùå");
            }

            //–°–û–ó–î–ê–ù–ò–ï –î–ò–ê–õ–û–ì–û–í
        }
    });

    //!–ü–†–û–°–õ–£–®–ö–ê VK –ì–†–£–ü

    async function startListenVk() {
        //–∑–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Å–ª—É—à–∫–∏ –≥—Ä—É–ø–ø
        activeListeners.forEach((stopListenToken, key) => stopListenToken());
        activeListeners.clear();

        try {
            const users: IUser[] = await User.find();

            for (const user of users) {
                const userChannels: IChannel[] = await Channel.find({ chatId: user.chatId, type: "vk" });

                for (const channel of userChannels) {
                    const vk = new VK({ token: channel.token });
                    vk.updates.on("message_new", async (msgContext: MessageContext<ContextDefaultState>) => {
                        //! –Ω–∞ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
                        const senderId = msgContext.senderId; // –ò—Å–ø–æ–ª—å–∑—É–µ–º senderId –≤–º–µ—Å—Ç–æ message.from_id
                        const peerId = msgContext.peerId; // –ò—Å–ø–æ–ª—å–∑—É–µ–º peerId –≤–º–µ—Å—Ç–æ message.peer_id
                        const isMsgFromAdmin = msgContext.isOutbox; //—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≥—Ä—É–ø–ø—ã –∏–ª–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        console.log("‚úâÔ∏è", msgContext.text, msgContext as MessageContext<ContextDefaultState>);

                        const newMessage = new Message({
                            channelName: channel.channelName,
                            text: msgContext.text,
                            time: msgContext.updatedAt,
                        });
                        const fromUser = await getUserVKInfo(vk, senderId);

                        //–Ω–∞—Ö–æ–¥–∏–º –∫–∞–Ω–∞–ª - –≤–¥—Ä—É–≥ –æ–Ω –æ–±–Ω–æ–≤–∏–ª—Å—è
                        const currentChannel = await Channel.findOne({ channelName: channel.channelName });
                        if (currentChannel) {
                            if (isMsgFromAdmin) {
                            } else {
                                //!–µ—Å–ª–∏ –º—ã –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ , —Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                                if (conversationChatsVK[user.chatId] && (conversationChatsVK[user.chatId].groupId !== currentChannel.groupId || conversationChatsVK[user.chatId]?.peer?.id !== peerId)) return;

                                bot.sendMessage(user.chatId, `üëë[${currentChannel.channelName}] ${fromUser?.first_name} ${fromUser?.last_name}: ${msgContext.text}`);
                            }

                            currentChannel.operatorsChatIds.forEach((chatId) => bot.sendMessage(chatId, `üõÇ[${channel.channelName}] ${fromUser?.first_name} ${fromUser?.last_name}: ${msgContext.text}`));
                        }

                        await newMessage.save();
                    });
                    vk.updates
                        .startPolling()
                        .then(() => {
                            console.log(`–ü—Ä–æ—Å–ª—É—à–∫–∞ –∫–Ω–∞–ª–∞: ${channel.channelName} - ${channel.groupId}`);
                        })
                        .catch(console.error);
                    activeListeners.set(channel.token, () => vk.updates.stop());
                }
            }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã :`, error);
        }
    }
    //TODO LISTEN OZON
    async function startListenOzon() {
        console.log("üîÑÔ∏è OZON UPDATE üîÑÔ∏è");

        try {
            const users: IUser[] = await User.find();

            for (const user of users) {
                const userChannels: IChannel[] = await Channel.find({ chatId: user.chatId, type: "ozon" });

                for (const channel of userChannels) {
                    //—Å–æ–±–∏—Ä–∞–µ–º —á–∞—Ç—ã –≤ –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å—Å—ã–ª–∞–µ–º –∏ –±–∑–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ VK
                    const chatsIds = [channel.chatId, ...channel.operatorsChatIds].filter((chatId) => !!!conversationChatsVK[chatId]);

                    checkLastMessagesOzon(channel.groupId, channel.token, bot, chatsIds, channel.channelName);
                }
            }
        } catch (error) {}

        setTimeout(() => startListenOzon(), 5000);
    }

    //!- –ó–ê–ü–£–°–ö –ü–†–û–°–õ–£–®–ï–ö
    startListenVk();
    startListenOzon();
};

try {
    startBot();
} catch (error) {
    console.log(error);
    startBot();
}
