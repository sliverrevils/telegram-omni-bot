// import { User } from "./models/User";

// import { Channel } from "./models/Channel";
// import { IChannel, IUser } from "..";
// import { ContextDefaultState, MessageContext, VK } from "vk-io";

// //–ú–∞—Å—Å–∏–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–ª—É—à–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ VK
// const activeListeners: Map<string, () => void> = new Map();

// export async function startListenVk() {
//     //–∑–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Å–ª—É—à–∫–∏ –≥—Ä—É–ø–ø
//     activeListeners.forEach((stopListenToken, key) => stopListenToken());
//     activeListeners.clear();

//     try {
//         const users: IUser[] = await User.find();

//         for (const user of users) {
//             const userChannels: IChannel[] = await Channel.find({ chatId: user.chatId });

//             for (const channel of userChannels) {
//                 const vk = new VK({ token: channel.token });
//                 vk.updates.on("message_new", async (msgContext: MessageContext<ContextDefaultState>) => {
//                     //! –Ω–∞ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
//                     const senderId = msgContext.senderId; // –ò—Å–ø–æ–ª—å–∑—É–µ–º senderId –≤–º–µ—Å—Ç–æ message.from_id
//                     const peerId = msgContext.peerId; // –ò—Å–ø–æ–ª—å–∑—É–µ–º peerId –≤–º–µ—Å—Ç–æ message.peer_id
//                     const isMsgFromAdmin = msgContext.isOutbox; //—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≥—Ä—É–ø–ø—ã –∏–ª–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//                     console.log("‚úâÔ∏è", msgContext.text, msgContext as MessageContext<ContextDefaultState>);

//                     const newMessage = new Message({
//                         channelName: channel.channelName,
//                         text: msgContext.text,
//                         time: msgContext.updatedAt,
//                     });
//                     const fromUser = await getUserVKInfo(vk, senderId);

//                     //–Ω–∞—Ö–æ–¥–∏–º –∫–∞–Ω–∞–ª - –≤–¥—Ä—É–≥ –æ–Ω –æ–±–Ω–æ–≤–∏–ª—Å—è
//                     const currentChannel = await Channel.findOne({ channelName: channel.channelName });
//                     if (currentChannel) {
//                         if (isMsgFromAdmin) {
//                         } else {
//                             //!–µ—Å–ª–∏ –º—ã –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ , —Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
//                             if (conversationChatsVK[user.chatId] && (conversationChatsVK[user.chatId].groupId !== currentChannel.groupId || conversationChatsVK[user.chatId]?.peer?.id !== peerId)) return;

//                             bot.sendMessage(user.chatId, `üëë[${currentChannel.channelName}] ${fromUser?.first_name} ${fromUser?.last_name}: ${msgContext.text}`);
//                         }

//                         currentChannel.operatorsChatIds.forEach((chatId) => bot.sendMessage(chatId, `üõÇ[${channel.channelName}] ${fromUser?.first_name} ${fromUser?.last_name}: ${msgContext.text}`));
//                     }

//                     await newMessage.save();
//                 });
//                 vk.updates
//                     .startPolling()
//                     .then(() => {
//                         console.log(`–ü—Ä–æ—Å–ª—É—à–∫–∞ –∫–Ω–∞–ª–∞: ${channel.channelName} - ${channel.groupId}`);
//                     })
//                     .catch(console.error);
//                 activeListeners.set(channel.token, () => vk.updates.stop());
//             }
//         }
//     } catch (error) {
//         console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã :`, error);
//     }
// }
